/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'

project.buildDir = 'bin/build'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceSets {
    main {
        java {
            srcDirs = ['code/src']
        }
        resources {
            srcDirs = ['code/res']
        }
    }

    test {
        java {
            srcDirs = ['code/test']
        }
    }
}

version = 'SNAPSHOT'

// In this section you declare the dependencies for your production and test code
dependencies {
    compile "commons-cli:commons-cli:1.3.1"
    compile "commons-codec:commons-codec:1.10"
    compile "commons-fileupload:commons-fileupload:1.2.2"
    compile "commons-io:commons-io:2.4"
    compile "org.apache.commons:commons-lang3:3.1"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.0.2"
    compile "com.fasterxml.jackson.core:jackson-core:2.0.2"
    compile "com.fasterxml.jackson.core:jackson-databind:2.0.2"
    compile group: 'javax.jmdns', name: 'jmdns', version: '3.4.1'
    compile files('lib/dns_sd.jar')

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:3.8.1'
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'P2P Dictionary',
                'Implementation-Version': version,
                "Class-Path": ". " + configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'com.rhfung.p2pd.Server',
        )
    }
}

task copyToLib(type: Copy) {
    into "$buildDir/lib"
    from configurations.runtime
}

assemble.finalizedBy(copyToLib)

tasks.withType(Jar) {
    //define directory where the archive is generated into
    destinationDir = file("dist/")
}
